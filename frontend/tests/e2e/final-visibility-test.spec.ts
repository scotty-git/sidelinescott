import { test, expect } from '@playwright/test';

test.describe('Final Visibility Test - Maximum Debugging', () => {
  test('should provide complete visibility into SAM6V2 prompt template issue', async ({ page }) => {
    console.log('🚀 Starting Final Visibility Test...');
    console.log('📍 Testing URL: http://127.0.0.1:6178');
    console.log('📍 Expected Backend: http://127.0.0.1:8000');
    
    // Enable clipboard permissions
    await page.context().grantPermissions(['clipboard-read', 'clipboard-write']);
    
    // Capture all network requests
    const networkLogs: string[] = [];
    page.on('request', (request) => {
      networkLogs.push(`➡️ REQUEST: ${request.method()} ${request.url()}`);
    });
    
    page.on('response', (response) => {
      networkLogs.push(`⬅️ RESPONSE: ${response.status()} ${response.url()}`);
    });
    
    // Capture all console logs
    const consoleLogs: string[] = [];
    page.on('console', (msg) => {
      consoleLogs.push(`[${msg.type()}] ${msg.text()}`);
    });
    
    // Step 1: Test backend connectivity from browser
    await page.goto('/');
    const backendTest = await page.evaluate(async () => {
      try {
        const response = await fetch('http://127.0.0.1:8000/');
        const data = await response.json();
        return { success: true, status: response.status, data };
      } catch (error) {
        return { success: false, error: error.message };
      }
    });
    
    console.log('🌐 Backend connectivity test from browser:', backendTest);\n    \n    // Step 2: Login process with detailed tracking\n    console.log('📝 Step 2: Login Process...');\n    \n    await page.waitForLoadState('networkidle');\n    \n    // Check if login page\n    const isLoginPage = await page.locator('input[type=\"email\"]').isVisible();\n    console.log('🔍 Is login page:', isLoginPage);\n    \n    if (isLoginPage) {\n      console.log('📋 Filling login form...');\n      await page.fill('input[type=\"email\"]', 'eval@lumenarc.ai');\n      await page.fill('input[type=\"password\"]', '@Evalaccount1');\n      \n      // Take screenshot before login\n      await page.screenshot({ path: 'test-results/before-login.png' });\n      \n      console.log('🔘 Clicking login button...');\n      await page.click('button:has-text(\"Sign in\")');\n      \n      // Wait and monitor response\n      await page.waitForTimeout(5000);\n      \n      // Take screenshot after login attempt\n      await page.screenshot({ path: 'test-results/after-login.png' });\n      \n      // Check for error messages\n      const errorSelectors = [\n        'text=\"Failed to fetch\"',\n        'text=\"Error\"',\n        'text=\"Invalid\"',\n        'text=\"Authentication failed\"',\n        '[class*=\"error\"]',\n        '[class*=\"red\"]'\n      ];\n      \n      console.log('🔍 Checking for error messages...');\n      for (const selector of errorSelectors) {\n        const errorElement = page.locator(selector);\n        if (await errorElement.isVisible().catch(() => false)) {\n          const errorText = await errorElement.textContent();\n          console.log(`❌ Error found: ${selector} = \"${errorText}\"`);\n        }\n      }\n      \n      // Check if login was successful\n      const loginSuccess = await page.locator('text=\"Lumen Transcript Cleaner\"').isVisible().catch(() => false);\n      console.log('✅ Login successful:', loginSuccess);\n    }\n    \n    // Step 3: Full page analysis\n    console.log('📝 Step 3: Full Page Analysis...');\n    \n    // Get all text content\n    const pageText = await page.locator('body').textContent();\n    \n    console.log('📊 Page Content Analysis:');\n    console.log('  - Contains \"Lumen Transcript Cleaner\":', pageText?.includes('Lumen Transcript Cleaner'));\n    console.log('  - Contains \"sam 6,v2\":', pageText?.includes('sam 6,v2'));\n    console.log('  - Contains \"Gemini v4\":', pageText?.includes('Gemini v4'));\n    console.log('  - Contains \"No template\":', pageText?.includes('No template'));\n    console.log('  - Contains \"Prompt:\":', pageText?.includes('Prompt:'));\n    console.log('  - Contains \"Copy Compact\":', pageText?.includes('Copy Compact'));\n    console.log('  - Contains \"Load Conversation\":', pageText?.includes('Load Conversation'));\n    console.log('  - Contains \"Conversations\":', pageText?.includes('Conversations'));\n    console.log('  - Contains \"Failed to fetch\":', pageText?.includes('Failed to fetch'));\n    \n    // Step 4: Element discovery\n    console.log('📝 Step 4: Element Discovery...');\n    \n    // Find all buttons\n    const buttons = await page.locator('button').all();\n    console.log('🔘 Found buttons:');\n    for (let i = 0; i < buttons.length; i++) {\n      const text = await buttons[i].textContent();\n      const isVisible = await buttons[i].isVisible();\n      console.log(`  ${i + 1}. \"${text}\" (visible: ${isVisible})`);\n    }\n    \n    // Find all inputs\n    const inputs = await page.locator('input').all();\n    console.log('📝 Found inputs:');\n    for (let i = 0; i < inputs.length; i++) {\n      const type = await inputs[i].getAttribute('type');\n      const placeholder = await inputs[i].getAttribute('placeholder');\n      const value = await inputs[i].inputValue();\n      console.log(`  ${i + 1}. Type: ${type}, Placeholder: \"${placeholder}\", Value: \"${value}\"`);\n    }\n    \n    // Find all divs with text content\n    const divs = await page.locator('div').all();\n    console.log('📦 Found divs with text (first 20):');\n    for (let i = 0; i < Math.min(divs.length, 20); i++) {\n      const text = await divs[i].textContent();\n      if (text && text.trim() && text.length < 100) {\n        console.log(`  ${i + 1}. \"${text.trim()}\"`);\n      }\n    }\n    \n    // Step 5: Network analysis\n    console.log('📝 Step 5: Network Analysis...');\n    console.log('📡 Network requests captured:');\n    networkLogs.forEach(log => console.log(`  ${log}`));\n    \n    // Step 6: Console analysis\n    console.log('📝 Step 6: Console Analysis...');\n    console.log('📋 Console logs captured:');\n    consoleLogs.forEach(log => console.log(`  ${log}`));\n    \n    // Step 7: Manual backend test\n    console.log('📝 Step 7: Manual Backend Test...');\n    \n    const manualBackendTest = await page.evaluate(async () => {\n      const tests = [];\n      \n      // Test root endpoint\n      try {\n        const response = await fetch('http://127.0.0.1:8000/');\n        const data = await response.json();\n        tests.push({ endpoint: '/', success: true, status: response.status, data });\n      } catch (error) {\n        tests.push({ endpoint: '/', success: false, error: error.message });\n      }\n      \n      // Test auth endpoint\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/v1/auth/login', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email: 'eval@lumenarc.ai', password: '@Evalaccount1' })\n        });\n        const data = await response.json();\n        tests.push({ endpoint: '/api/v1/auth/login', success: true, status: response.status, data });\n      } catch (error) {\n        tests.push({ endpoint: '/api/v1/auth/login', success: false, error: error.message });\n      }\n      \n      return tests;\n    });\n    \n    console.log('🧪 Manual backend test results:');\n    manualBackendTest.forEach(test => {\n      console.log(`  ${test.endpoint}: ${test.success ? '✅' : '❌'} ${test.success ? test.status : test.error}`);\n    });\n    \n    // Step 8: Take final comprehensive screenshot\n    await page.screenshot({ path: 'test-results/final-comprehensive.png', fullPage: true });\n    \n    // Step 9: Summary report\n    console.log('📝 Step 9: Summary Report...');\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n    console.log('📊 FINAL VISIBILITY TEST REPORT');\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n    console.log('🌐 Backend Connectivity:', backendTest.success ? '✅' : '❌');\n    console.log('🔐 Authentication:', manualBackendTest.find(t => t.endpoint === '/api/v1/auth/login')?.success ? '✅' : '❌');\n    console.log('📄 Main Interface Loaded:', pageText?.includes('Load Conversation') ? '✅' : '❌');\n    console.log('💬 SAM6V2 Conversation:', pageText?.includes('sam 6,v2') ? '✅' : '❌');\n    console.log('🏷️ Prompt Template (Gemini v4):', pageText?.includes('Gemini v4') ? '✅' : '❌');\n    console.log('📋 Copy Compact Button:', pageText?.includes('Copy Compact') ? '✅' : '❌');\n    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');\n    \n    if (!backendTest.success) {\n      console.log('❌ ROOT CAUSE: Backend is not responding to frontend requests');\n      console.log('🔧 SOLUTION: Ensure backend is running and accessible from frontend');\n    } else if (!manualBackendTest.find(t => t.endpoint === '/api/v1/auth/login')?.success) {\n      console.log('❌ ROOT CAUSE: Authentication endpoint is not working');\n      console.log('🔧 SOLUTION: Check authentication configuration');\n    } else if (!pageText?.includes('Load Conversation')) {\n      console.log('❌ ROOT CAUSE: Main interface is not loading after login');\n      console.log('🔧 SOLUTION: Check login flow and main app initialization');\n    } else {\n      console.log('✅ System appears to be working correctly');\n    }\n    \n    console.log('🏁 Final Visibility Test completed');\n  });\n  \n  test('should test with mock data if backend is unavailable', async ({ page }) => {\n    console.log('🧪 Starting Mock Data Test...');\n    \n    // Navigate to page\n    await page.goto('/');\n    \n    // Mock the backend responses\n    await page.route('**/api/v1/auth/login', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          access_token: 'mock-token',\n          user: { id: 'mock-user', email: 'eval@lumenarc.ai' }\n        })\n      });\n    });\n    \n    await page.route('**/api/v1/conversations', async route => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          conversations: [\n            { id: 'mock-id', name: 'sam 6,v2', description: 'Mock conversation' }\n          ]\n        })\n      });\n    });\n    \n    // Try login with mocked backend\n    if (await page.locator('input[type=\"email\"]').isVisible()) {\n      await page.fill('input[type=\"email\"]', 'eval@lumenarc.ai');\n      await page.fill('input[type=\"password\"]', '@Evalaccount1');\n      await page.click('button:has-text(\"Sign in\")');\n      \n      await page.waitForTimeout(3000);\n      \n      console.log('🔍 Testing with mocked backend...');\n      \n      // Check if main interface appears\n      const mainInterface = await page.locator('text=\"Load Conversation\"').isVisible().catch(() => false);\n      console.log('📱 Main interface visible:', mainInterface);\n      \n      if (mainInterface) {\n        console.log('✅ Mock backend test successful - main interface loaded');\n      } else {\n        console.log('❌ Mock backend test failed - main interface not loaded');\n      }\n    }\n    \n    await page.screenshot({ path: 'test-results/mock-backend-test.png', fullPage: true });\n    \n    console.log('🏁 Mock Data Test completed');\n  });\n});